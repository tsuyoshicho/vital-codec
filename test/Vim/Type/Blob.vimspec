Describe Vim.Type.Blob
  Before all
    let b = vital#vital#new().import('Vim.Type.Blob')
    let typeval = type(0z00)
  End

  " new(length)
  Describe .new()
    It cast any data
      for i in [1,2,4,8,16,32,64]
        let data = b.new(i)
        Assert Equals(type(data), typeval)
        Assert Equals(len(data),  i)
      endfor
    End
  End

  " uint8(...)
  Describe .uint8()
    It cast no data
      let data = b.uint8()
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  1)
    End
    It cast unsupport data
      Throws /^vital: Vim.Type.Blob:/ b.uint8({})
    End
    It cast any data number
      let source = [0x0F]
      let source_joined = 0x0F
      let data = b.uint8(source_joined)
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  len(source))
      for i in range(len(source))
        Assert Equals(data[i],  source[i])
      endfor
    End
    It cast any data oversize number
      let source = [0x0F]
      let source_joined = 0x0A0F
      let data = b.uint8(source_joined)
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  len(source))
      for i in range(len(source))
        Assert Equals(data[i],  source[i])
      endfor
    End
    It cast any data string
      let source = [0x0F]
      let source_joined = '0F'
      let data = b.uint8(source_joined)
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  len(source))
      for i in range(len(source))
        Assert Equals(data[i],  source[i])
      endfor
    End
    It cast any data oversize string
      let source = [0x0F]
      let source_joined = '0A0F'
      let data = b.uint8(source_joined)
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  len(source))
      for i in range(len(source))
        Assert Equals(data[i],  source[i])
      endfor
    End
    It cast any data list
      let source = [0x0F]
      let source_joined = [0x0F]
      let data = b.uint8(source_joined)
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  len(source))
      for i in range(len(source))
        Assert Equals(data[i],  source[i])
      endfor
    End
    It cast any data oversize list
      let source = [0x0F]
      let source_joined = [0x0A, 0x0F]
      let data = b.uint8(source_joined)
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  len(source))
      for i in range(len(source))
        Assert Equals(data[i],  source[i])
      endfor
    End
    It cast any data blob
      let source = [0x0F]
      let source_joined = 0z0F
      let data = b.uint8(source_joined)
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  len(source))
      for i in range(len(source))
        Assert Equals(data[i],  source[i])
      endfor
    End
    It cast any data oversize blob
      let source = [0x0F]
      let source_joined = 0z0A0F
      let data = b.uint8(source_joined)
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  len(source))
      for i in range(len(source))
        Assert Equals(data[i],  source[i])
      endfor
    End
  End

  " uint16(...)
  Describe .uint16()
    It cast no data
      let data = b.uint16()
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  2)
    End
    It cast any data
      let source = [0x0F, 0x0E]
      let source_joined = 0x0F0E
      let data = b.uint16(source_joined)
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  len(source))
      for i in range(len(source))
        Assert Equals(data[i],  source[i])
      endfor
    End
  End

  " uint32(...)
  Describe .uint32()
    It cast no data
      let data = b.uint32()
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  4)
    End
    It cast any data
      let source = [0x0F, 0x0E, 0x0D, 0x0C]
      let source_joined = 0x0F0E0D0C
      let data = b.uint32(source_joined)
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  len(source))
      for i in range(len(source))
        Assert Equals(data[i],  source[i])
      endfor
    End
  End

  " uint64(...)
  Describe .uint64()
    It cast no data
      let data = b.uint64()
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  8)
    End
    It cast any data
      let source = [0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08]
      let source_joined = 0x0F0E0D0C0B0A0908
      let data = b.uint64(source_joined)
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  len(source))
      for i in range(len(source))
        Assert Equals(data[i],  source[i])
      endfor
    End
  End

  " or(x, y)
  Describe .or()
    It size 1 byte
      let source_x = [0x3f]
      let source_a_joined = 0x18
      let source_b_joined = 0x37
      let data_a = b.uint8(source_a_joined)
      let data_b = b.uint8(source_b_joined)
      let data_x = b.or(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 2 byte
      let source_x = [0x3f, 0xFF]
      let source_a_joined = 0x18F0
      let source_b_joined = 0x370F
      let data_a = b.uint16(source_a_joined)
      let data_b = b.uint16(source_b_joined)
      let data_x = b.or(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 4 byte
      let source_x = [0x3F, 0xFF, 0xBB, 0x55]
      let source_a_joined = 0x18F03A11
      let source_b_joined = 0x370FA344
      let data_a = b.uint32(source_a_joined)
      let data_b = b.uint32(source_b_joined)
      let data_x = b.or(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 8 byte
      let source_x = [0x3F, 0xFF, 0xBB, 0x55, 0x3F, 0xFF, 0xBB, 0x55]
      let source_a_joined = 0x18F03A11370FA344
      let source_b_joined = 0x370FA34418F03A11
      let data_a = b.uint64(source_a_joined)
      let data_b = b.uint64(source_b_joined)
      let data_x = b.or(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
  End

  " xor(x, y)
  Describe .xor()
    It size 1 byte
      let source_x = [0x2F]
      let source_a_joined = 0x18
      let source_b_joined = 0x37
      let data_a = b.uint8(source_a_joined)
      let data_b = b.uint8(source_b_joined)
      let data_x = b.xor(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 2 byte
      let source_x = [0x2F, 0xFF]
      let source_a_joined = 0x18F0
      let source_b_joined = 0x370F
      let data_a = b.uint16(source_a_joined)
      let data_b = b.uint16(source_b_joined)
      let data_x = b.xor(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 4 byte
      let source_x = [0x2F, 0xFF, 0x99, 0x00]
      let source_a_joined = 0x18F03A44
      let source_b_joined = 0x370FA344
      let data_a = b.uint32(source_a_joined)
      let data_b = b.uint32(source_b_joined)
      let data_x = b.xor(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 8 byte
      let source_x = [0x2F, 0xFF, 0x99, 0x00, 0x2F, 0xFF, 0x99, 0x00]
      let source_a_joined = 0x18F03A44370FA344
      let source_b_joined = 0x370FA34418F03A44
      let data_a = b.uint64(source_a_joined)
      let data_b = b.uint64(source_b_joined)
      let data_x = b.xor(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
  End

  " and(x, y)
  Describe .and()
    It size 1 byte
      let source_x = [0x10]
      let source_a_joined = 0x18
      let source_b_joined = 0x37
      let data_a = b.uint8(source_a_joined)
      let data_b = b.uint8(source_b_joined)
      let data_x = b.and(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 2 byte
      let source_x = [0x10, 0x00]
      let source_a_joined = 0x18F0
      let source_b_joined = 0x370F
      let data_a = b.uint16(source_a_joined)
      let data_b = b.uint16(source_b_joined)
      let data_x = b.and(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 4 byte
      let source_x = [0x10, 0x00, 0x22, 0x44]
      let source_a_joined = 0x18F03A44
      let source_b_joined = 0x370FA344
      let data_a = b.uint32(source_a_joined)
      let data_b = b.uint32(source_b_joined)
      let data_x = b.and(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 8 byte
      let source_x = [0x10, 0x00, 0x22, 0x44, 0x10, 0x00, 0x22, 0x44]
      let source_a_joined = 0x18F03A44370FA344
      let source_b_joined = 0x370FA34418F03A44
      let data_a = b.uint64(source_a_joined)
      let data_b = b.uint64(source_b_joined)
      let data_x = b.and(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size unmatch
      let source_a_joined = 0x18F03A44
      let source_b_joined = 0x370F
      let data_a = b.uint32(source_a_joined)
      let data_b = b.uint16(source_b_joined)
      Throws /^vital: Vim.Type.Blob:/ b.and(data_a, data_b)
    End
  End

  " invert(x)
  Describe .invert()
    It size 1 byte
      let source_x = [0xE7]
      let source_a_joined = 0x18
      let data_a = b.uint8(source_a_joined)
      let data_x = b.invert(data_a)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 2 byte
      let source_x = [0xE7, 0x0F]
      let source_a_joined = 0x18F0
      let data_a = b.uint16(source_a_joined)
      let data_x = b.invert(data_a)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 4 byte
      let source_x = [0xE7, 0x0F, 0xC5, 0xBB]
      let source_a_joined = 0x18F03A44
      let data_a = b.uint32(source_a_joined)
      let data_x = b.invert(data_a)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 8 byte
      let source_x = [0xE7, 0x0F, 0xC5, 0xBB, 0xC8, 0xF0, 0x5C, 0xBB]
      let source_a_joined = 0x18F03A44370FA344
      let data_a = b.uint64(source_a_joined)
      let data_x = b.invert(data_a)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
  End

  " rotr(x, bits)
  Describe .rotr()
    It call only test function call for rotl()
      let source_x = [0x03, 0x1E]
      let rot = 3
      let source_a_joined = 0x18F0
      let data_a = b.uint16(source_a_joined)
      let data_x = b.rotr(data_a, rot)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
  End

  " rotl(x, bits)
  Describe .rotl()
    It size 1 byte
      let source_x = [0xC0]
      let rot = 3 + (8 * (1 - 1))
      let source_a_joined = 0x18
      let data_a = b.uint8(source_a_joined)
      let data_x = b.rotl(data_a, rot)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 2 byte
      let source_x = [0x80, 0xC7]
      let rot = 3 + (8 * (2 - 1))
      let source_a_joined = 0x18F0
      let data_a = b.uint16(source_a_joined)
      let data_x = b.rotl(data_a, rot)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 4 byte
      let source_x = [0x20, 0xC7, 0x81, 0xD2]
      let rot = 3 + (8 * (4 - 1))
      let source_a_joined = 0x18F03A44
      let data_a = b.uint32(source_a_joined)
      let data_x = b.rotl(data_a, rot)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 8 byte
      let source_x = [0x20, 0xC7, 0x81, 0xD2, 0x21, 0xB8, 0x7D, 0x1A]
      let rot = 3 + (8 * (8 - 1))
      let source_a_joined = 0x18F03A44370FA344
      let data_a = b.uint64(source_a_joined)
      let data_x = b.rotl(data_a, rot)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
  End

  " rotateright(x, bits)
  Describe .rotateright()
    It call only test function call for rotr()
      let source_x = [0x03, 0x1E]
      let rot = 3
      let source_a_joined = 0x18F0
      let data_a = b.uint16(source_a_joined)
      let data_x = b.rotateright(data_a, rot)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
  End

  " rotateleft(x, bits)
  Describe .rotateleft()
    It call only test function call for rotl()
      let source_x = [0x80, 0xC7]
      let rot = 3 + (8 * (2 - 1))
      let source_a_joined = 0x18F0
      let data_a = b.uint16(source_a_joined)
      let data_x = b.rotateleft(data_a, rot)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
  End

  " add(x, y)
  Describe .add()
    It size 4 byte same size
      let source_x = [0x4F, 0xFF, 0xDD, 0x88]
      let source_a_joined = 0x18F03A44
      let source_b_joined = 0x370FA344
      let data_a = b.uint32(source_a_joined)
      let data_b = b.uint32(source_b_joined)
      let data_x = b.add(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 4 byte x is samll
      let source_x = [0x37, 0x0F, 0xDD, 0x88]
      let source_a_joined =     0x3A44
      let source_b_joined = 0x370FA344
      let data_a = b.uint16(source_a_joined)
      let data_b = b.uint32(source_b_joined)
      let data_x = b.add(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 4 byte y is small
      let source_x = [0x18, 0xF0, 0xDD, 0x88]
      let source_a_joined = 0x18F03A44
      let source_b_joined =     0xA344
      let data_a = b.uint32(source_a_joined)
      let data_b = b.uint16(source_b_joined)
      let data_x = b.add(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 4 byte carry over
      let source_x = [0x01, 0x4F, 0xFF, 0xDD, 0x88]
      let source_a_joined = 0x98F03A44
      let source_b_joined = 0xB70FA344
      let data_a = b.uint32(source_a_joined)
      let data_b = b.uint32(source_b_joined)
      let data_x = b.add(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 4 byte y is small, b as number
      let source_x = [0x18, 0xF0, 0xDD, 0x88]
      let source_a_joined = 0x18F03A44
      let source_b_joined =     0xA344
      let data_a = b.uint32(source_a_joined)
      let data_b = source_b_joined
      let data_x = b.add(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
  End

  " rshift(x, bits)
  Describe .rshift()
    It shift check
      let source_x = [0xAB]
      let shift = 8
      let source_a_joined = 0xABCD
      let data_a = b.uint16(source_a_joined)
      let data_x = b.rshift(data_a, shift)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It non_block shift check
      let source_x = [0x0A, 0xBC]
      let shift = 4
      let source_a_joined = 0xABCD
      let data_a = b.uint16(source_a_joined)
      let data_x = b.rshift(data_a, shift)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It -1 block/top cut shift check
      let source_x = [0xBC, 0xD0]
      let shift = 12
      let source_a_joined = 0x0BCD0000
      let data_a = b.uint32(source_a_joined)
      let data_x = b.rshift(data_a, shift)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
  End

  " lshift(x, bits)
  Describe .lshift()
    It shift check
      let source_x = [0xAB, 0x00]
      let shift = 8
      let source_a_joined = 0xAB
      let data_a = b.uint8(source_a_joined)
      let data_x = b.lshift(data_a, shift)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It non-block shift check
      let source_x = [0x0A, 0xB0]
      let shift = 4
      let source_a_joined = 0xAB
      let data_a = b.uint8(source_a_joined)
      let data_x = b.lshift(data_a, shift)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It +1 block/top cut shift check
      let source_x = [0xB0, 0x00]
      let shift = 12
      let source_a_joined = 0x0B
      let data_a = b.uint8(source_a_joined)
      let data_x = b.lshift(data_a, shift)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
  End

  " uint_add(x, y)
  Describe .uint_add()
    It size 1 byte
      let source_x = [0x4F]
      let source_a_joined = 0x18
      let source_b_joined = 0x37
      let data_a = b.uint8(source_a_joined)
      let data_b = b.uint8(source_b_joined)
      let data_x = b.uint_add(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 2 byte
      let source_x = [0x4F, 0xFF]
      let source_a_joined = 0x18F0
      let source_b_joined = 0x370F
      let data_a = b.uint16(source_a_joined)
      let data_b = b.uint16(source_b_joined)
      let data_x = b.uint_add(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 4 byte
      let source_x = [0x4F, 0xFF, 0xDD, 0x88]
      let source_a_joined = 0x18F03A44
      let source_b_joined = 0x370FA344
      let data_a = b.uint32(source_a_joined)
      let data_b = b.uint32(source_b_joined)
      let data_x = b.uint_add(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 8 byte
      let source_x = [0x4F, 0xFF, 0xDD, 0x88, 0x4F, 0xFF, 0xDE, 0x08]
      let source_a_joined = 0x18F03A44370FA384
      let source_b_joined = 0x370FA34418F03A84
      let data_a = b.uint64(source_a_joined)
      let data_b = b.uint64(source_b_joined)
      let data_x = b.uint_add(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    " size error
    It size 4 byte x is samll
      let source_x = [0x37, 0xFF, 0xDD, 0x88]
      let source_a_joined =     0x3A44
      let source_b_joined = 0x370FA344
      let data_a = b.uint16(source_a_joined)
      let data_b = b.uint32(source_b_joined)
      Throws /^vital: Vim.Type.Blob:/ b.uint_add(data_a, data_b)
    End
    " overflow error
    It size 4 byte carry over
      let source_a_joined = 0x98F03A44
      let source_b_joined = 0xB70FA344
      let data_a = b.uint32(source_a_joined)
      let data_b = b.uint32(source_b_joined)
      Throws /^vital: Vim.Type.Blob:/ b.uint_add(data_a, data_b, 'overflow')
    End
    " overflow Skip
    It size 4 byte carry over skip
      let source_a_joined = 0x98F03A44
      let source_b_joined = 0xB70FA344
      let data_a = b.uint32(source_a_joined)
      let data_b = b.uint32(source_b_joined)
      let result = b.uint_add(data_a, data_b)
      Assert NotEmpty(result)
    End
  End
End
