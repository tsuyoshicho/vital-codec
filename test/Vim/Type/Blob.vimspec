Describe Vim.Type.Blob
  Before all
    let b = vital#vital#new().import('Vim.Type.Blob')
    let typeval = type(0z00)
  End

 " new(length)
 " uint8bit(...)
 " uint16bit(...)
 " uint32bit(...)
 " uint64bit(...)
  Describe .new()
    It cast any data
      for i in [1,2,4,8,16,32,64]
        let data = b.new(i)
        Assert Equals(type(data), typeval)
        Assert Equals(len(data),  i)
      endfor
    End
  End

  Describe .uint8bit()
    It cast no data
      let data = b.uint8bit()
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  1)
    End
    It cast any data
      let source = [0x0F]
      let source_joined = 0x0F
      let data = b.uint8bit(source_joined)
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  len(source))
      for i in range(len(source))
        Assert Equals(data[i],  source[i])
      endfor
    End
  End

  Describe .uint16bit()
    It cast no data
      let data = b.uint16bit()
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  2)
    End
    It cast any data
      let source = [0x0F, 0x0E]
      let source_joined = 0x0F0E
      let data = b.uint16bit(source_joined)
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  len(source))
      for i in range(len(source))
        Assert Equals(data[i],  source[i])
      endfor
    End
  End

  Describe .uint32bit()
    It cast no data
      let data = b.uint32bit()
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  4)
    End
    It cast any data
      let source = [0x0F, 0x0E, 0x0D, 0x0C]
      let source_joined = 0x0F0E0D0C
      let data = b.uint32bit(source_joined)
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  len(source))
      for i in range(len(source))
        Assert Equals(data[i],  source[i])
      endfor
    End
  End

  Describe .uint64bit()
    It cast no data
      let data = b.uint64bit()
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  8)
    End
    It cast any data
      let source = [0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08]
      let source_joined = 0x0F0E0D0C0B0A0908
      let data = b.uint64bit(source_joined)
      Assert Equals(type(data), typeval)
      Assert Equals(len(data),  len(source))
      for i in range(len(source))
      :qa
        Assert Equals(data[i],  source[i])
      endfor
    End
  End

 "
 " or(x, y)
 " xor(x, y)
 " and(x, y)
 " invert(x)
 " rotl(x, bits)
  Describe .or()
    It size 1 byte
      let source_x = [0x3f]
      let source_a_joined = 0x18
      let source_b_joined = 0x37
      let data_a = b.uint8bit(source_a_joined)
      let data_b = b.uint8bit(source_b_joined)
      let data_x = b.or(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 2 byte
      let source_x = [0x3f, 0xFF]
      let source_a_joined = 0x18F0
      let source_b_joined = 0x370F
      let data_a = b.uint16bit(source_a_joined)
      let data_b = b.uint16bit(source_b_joined)
      let data_x = b.or(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 4 byte
      let source_x = [0x3f, 0xFF, 0xFF, 044]
      let source_a_joined = 0x18F03A44
      let source_b_joined = 0x370FA344
      let data_a = b.uint32bit(source_a_joined)
      let data_b = b.uint32bit(source_b_joined)
      let data_x = b.or(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
    It size 8 byte
      let source_x = [0x3f, 0xFF, 0xFF, 044, 0x3f, 0xFF, 0xFF, 044]
      let source_a_joined = 0x18F03A44370FA344
      let source_b_joined = 0x370FA34418F03A44
      let data_a = b.uint64bit(source_a_joined)
      let data_b = b.uint64bit(source_b_joined)
      let data_x = b.or(data_a, data_b)
      Assert Equals(type(data_x), typeval)
      Assert Equals(len(data_x),  len(source_x))
      for i in range(len(source_x))
        Assert Equals(data_x[i],  source_x[i])
      endfor
    End
  End

 " uint_add(x, y)

End
