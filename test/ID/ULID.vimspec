Describe ID.ULID
  Before all
    let assert = themis#helper('assert')
    let ULID = vital#vital#new().import('ID.ULID')
    let DateTime = vital#vital#new().import('DateTime')

    let FixedData = vital#vital#new().import('RandomEx.FixedData')

    let testdata1 = [0xFF,0x00]
    let testdata2 = [0x00,0xFF]
  End

  Describe .generate()
    It generate ULID string. type
      call assert.is_string(ULID.generate())
    End
    It generate ULID string. length
      Assert Equals(len(ULID.generate()), 26)
    End
    It generate ULID string. all 0x00 data
      let generator = FixedData.new_generator()
      let epoch = DateTime.from_unix_time(0)
      "  01AN4Z07BY      79KA1307SR9X4MV3
      " |----------|    |----------------|
      "  Timestamp          Randomness
      "   48bits             80bits
      Assert Equals(tolower(ULID.generate(generator, testdata1, epoch)), '0000000000' . '0000000000000000')
    End
    It random UUID generate. all 0xFF data
      let generator = FixedData.new_generator()
      let epoch = DateTime.from_unix_time(0)
      "  01AN4Z07BY      79KA1307SR9X4MV3
      " |----------|    |----------------|
      "  Timestamp          Randomness
      "   48bits             80bits
      Assert Equals(tolower(ULID.generate(generator, testdata2, epoch)), '0000000000' . 'zzzzzzzzzzzzzzzz')
    End
  End

  Describe .generateUUID()
    It generate ULID UUID format string. type
      call assert.is_string(ULID.generateUUID())
    End
    It generate ULID UUID format string. length
      Assert Equals(len(ULID.generateUUID()), 36)
    End
  End

  Describe .ULID2UUID()
    It convert ULID to UUID format string.
      Skip currently, test data nothing.
    End
  End
End
