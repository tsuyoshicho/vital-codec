Describe Hash.HMAC
  Before all
    let HMAC = vital#vital#new().import('Hash.HMAC')
    let MD5  = vital#vital#new().import('Hash.MD5')
    " let SHA1 = vital#vital#new().import('Hash.SHA1')

    " https://tools.ietf.org/html/rfc2202
    " RFC TestVector
    " 2. Test Cases for HMAC-MD5

    let test_case_md5 = []

    call add(test_case_md5, {})
    let test_case_md5[-1].test_case  = 1
    let test_case_md5[-1].key        = [0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b]
    let test_case_md5[-1].key_len    = 16
    let test_case_md5[-1].data       = "Hi There"
    let test_case_md5[-1].data_len   = 8
    let test_case_md5[-1].digest     = [0x92, 0x94, 0x72, 0x7a, 0x36, 0x38, 0xbb, 0x1c, 0x13, 0xf4, 0x8e, 0xf8, 0x15, 0x8b, 0xfc, 0x9d]
    let test_case_md5[-1].digest_str = '9294727a3638bb1c13f48ef8158bfc9d'

    call add(test_case_md5, {})
    let test_case_md5[-1].test_case  = 2
    let test_case_md5[-1].key        = "Jefe"
    let test_case_md5[-1].key_len    = 4
    let test_case_md5[-1].data       = "what do ya want for nothing?"
    let test_case_md5[-1].data_len   = 28
    let test_case_md5[-1].digest     = [0x75, 0x0c, 0x78, 0x3e, 0x6a, 0xb0, 0xb5, 0x03, 0xea, 0xa8, 0x6e, 0x31, 0x0a, 0x5d, 0xb7, 0x38]
    let test_case_md5[-1].digest_str = '750c783e6ab0b503eaa86e310a5db738'

    call add(test_case_md5, {})
    let test_case_md5[-1].test_case  = 3
    let test_case_md5[-1].key        = [0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa]
    let test_case_md5[-1].key_len    = 16
    let test_case_md5[-1].data       = repeat([0xdd], 50) " 0xdd repeated 50 times
    let test_case_md5[-1].data_len   = 50
    let test_case_md5[-1].digest     = [0x56, 0xbe, 0x34, 0x52, 0x1d, 0x14, 0x4c, 0x88, 0xdb, 0xb8, 0xc7, 0x33, 0xf0, 0xe8, 0xb3, 0xf6]
    let test_case_md5[-1].digest_str = '56be34521d144c88dbb8c733f0e8b3f6'

    call add(test_case_md5, {})
    let test_case_md5[-1].test_case  = 4
    let test_case_md5[-1].key        = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19]
    let test_case_md5[-1].key_len    = 25
    let test_case_md5[-1].data       = repeat([0xcd], 50) " 0xcd repeated 50 times
    let test_case_md5[-1].data_len   = 50
    let test_case_md5[-1].digest     = [0x69, 0x7e, 0xaf, 0x0a, 0xca, 0x3a, 0x3a, 0xea, 0x3a, 0x75, 0x16, 0x47, 0x46, 0xff, 0xaa, 0x79]
    let test_case_md5[-1].digest_str = '697eaf0aca3a3aea3a75164746ffaa79'

    call add(test_case_md5, {})
    let test_case_md5[-1].test_case  = 5
    let test_case_md5[-1].key        = [0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c]
    let test_case_md5[-1].key_len    = 16
    let test_case_md5[-1].data       = "Test With Truncation"
    let test_case_md5[-1].data_len   = 20
    let test_case_md5[-1].digest     = [0x56, 0x46, 0x1e, 0xf2, 0x34, 0x2e, 0xdc, 0x00, 0xf9, 0xba, 0xb9, 0x95, 0x69, 0x0e, 0xfd, 0x4c]
    let test_case_md5[-1].digest_str = '56461ef2342edc00f9bab995690efd4c'
    " digest-96       0x56461ef2342edc00f9bab995

    call add(test_case_md5, {})
    let test_case_md5[-1].test_case  = 6
    let test_case_md5[-1].key        = repeat([0xaa], 80) " 0xaa repeated 80 times
    let test_case_md5[-1].key_len    = 80
    let test_case_md5[-1].data       = "Test Using Larger Than Block-Size Key - Hash Key First"
    let test_case_md5[-1].data_len   = 54
    let test_case_md5[-1].digest     = [0x6b, 0x1a, 0xb7, 0xfe, 0x4b, 0xd7, 0xbf, 0x8f, 0x0b, 0x62, 0xe6, 0xce, 0x61, 0xb9, 0xd0, 0xcd]
    let test_case_md5[-1].digest_str = '6b1ab7fe4bd7bf8f0b62e6ce61b9d0cd'

    call add(test_case_md5, {})
    let test_case_md5[-1].test_case  = 7
    let test_case_md5[-1].key        = repeat([0xaa], 80) " 0xaa repeated 80 times
    let test_case_md5[-1].key_len    = 80
    let test_case_md5[-1].data       = "Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data"
    let test_case_md5[-1].data_len   = 73
    let test_case_md5[-1].digest     = [0x6f, 0x63, 0x0f, 0xad, 0x67, 0xcd, 0xa0, 0xee, 0x1f, 0xb1, 0xf5, 0x62, 0xdb, 0x3a, 0xa5, 0x3e]
    let test_case_md5[-1].digest_str = '6f630fad67cda0ee1fb1f562db3aa53e'

    " 3. Test Cases for HMAC-SHA-1

    let test_case_sha1 = []

    call add(test_case_sha1, {})
    let test_case_sha1[-1].test_case  = 1
    let test_case_sha1[-1].key        = [0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b]
    let test_case_sha1[-1].key_len    = 20
    let test_case_sha1[-1].data       = "Hi There"
    let test_case_sha1[-1].data_len   = 8
    let test_case_sha1[-1].digest     = [0xb6, 0x17, 0x31, 0x86, 0x55, 0x05, 0x72, 0x64, 0xe2, 0x8b, 0xc0, 0xb6, 0xfb, 0x37, 0x8c, 0x8e, 0xf1, 0x46, 0xbe, 0x00]
    let test_case_sha1[-1].digest_str = 'b617318655057264e28bc0b6fb378c8ef146be00'

    call add(test_case_sha1, {})
    let test_case_sha1[-1].test_case  = 2
    let test_case_sha1[-1].key        = "Jefe"
    let test_case_sha1[-1].key_len    = 4
    let test_case_sha1[-1].data       = "what do ya want for nothing?"
    let test_case_sha1[-1].data_len   = 28
    let test_case_sha1[-1].digest     = [0xef, 0xfc, 0xdf, 0x6a, 0xe5, 0xeb, 0x2f, 0xa2, 0xd2, 0x74, 0x16, 0xd5, 0xf1, 0x84, 0xdf, 0x9c, 0x25, 0x9a, 0x7c, 0x79]
    let test_case_sha1[-1].digest_str = 'effcdf6ae5eb2fa2d27416d5f184df9c259a7c79'

    call add(test_case_sha1, {})
    let test_case_sha1[-1].test_case  = 3
    let test_case_sha1[-1].key        = [0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa]
    let test_case_sha1[-1].key_len    = 20
    let test_case_sha1[-1].data       = repeat([0xdd], 50) "0xdd repeated 50 times
    let test_case_sha1[-1].data_len   = 50
    let test_case_sha1[-1].digest     = [0x12, 0x5d, 0x73, 0x42, 0xb9, 0xac, 0x11, 0xcd, 0x91, 0xa3, 0x9a, 0xf4, 0x8a, 0xa1, 0x7b, 0x4f, 0x63, 0xf1, 0x75, 0xd3]
    let test_case_sha1[-1].digest_str = '125d7342b9ac11cd91a39af48aa17b4f63f175d3'

    call add(test_case_sha1, {})
    let test_case_sha1[-1].test_case  = 4
    let test_case_sha1[-1].key        = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19]
    let test_case_sha1[-1].key_len    = 25
    let test_case_sha1[-1].data       = repeat([0xcd], 50) "0xcd repeated 50 times
    let test_case_sha1[-1].data_len   = 50
    let test_case_sha1[-1].digest     = [0x4c, 0x90, 0x07, 0xf4, 0x02, 0x62, 0x50, 0xc6, 0xbc, 0x84, 0x14, 0xf9, 0xbf, 0x50, 0xc8, 0x6c, 0x2d, 0x72, 0x35, 0xda]
    let test_case_sha1[-1].digest_str = '4c9007f4026250c6bc8414f9bf50c86c2d7235da'

    call add(test_case_sha1, {})
    let test_case_sha1[-1].test_case  = 5
    let test_case_sha1[-1].key        = [0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c]
    let test_case_sha1[-1].key_len    = 20
    let test_case_sha1[-1].data       = "Test With Truncation"
    let test_case_sha1[-1].data_len   = 20
    let test_case_sha1[-1].digest     = [0x4c, 0x1a, 0x03, 0x42, 0x4b, 0x55, 0xe0, 0x7f, 0xe7, 0xf2, 0x7b, 0xe1, 0xd5, 0x8b, 0xb9, 0x32, 0x4a, 0x9a, 0x5a, 0x04]
    let test_case_sha1[-1].digest_str = '4c1a03424b55e07fe7f27be1d58bb9324a9a5a04'
    " digest-96 =     0x4c1a03424b55e07fe7f27be1

    call add(test_case_sha1, {})
    let test_case_sha1[-1].test_case  = 6
    let test_case_sha1[-1].key        = repeat([0xaa], 80) "0xaa repeated 80 times
    let test_case_sha1[-1].key_len    = 80
    let test_case_sha1[-1].data       = "Test Using Larger Than Block-Size Key - Hash Key First"
    let test_case_sha1[-1].data_len   = 54
    let test_case_sha1[-1].digest     = [0xaa, 0x4a, 0xe5, 0xe1, 0x52, 0x72, 0xd0, 0x0e, 0x95, 0x70, 0x56, 0x37, 0xce, 0x8a, 0x3b, 0x55, 0xed, 0x40, 0x21, 0x12]
    let test_case_sha1[-1].digest_str = 'aa4ae5e15272d00e95705637ce8a3b55ed402112'

    call add(test_case_sha1, {})
    let test_case_sha1[-1].test_case  = 7
    let test_case_sha1[-1].key        = repeat([0xaa], 80) "0xaa repeated 80 times
    let test_case_sha1[-1].key_len    = 80
    let test_case_sha1[-1].data       = "Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data"
    let test_case_sha1[-1].data_len   = 73
    let test_case_sha1[-1].digest     = [0xe8, 0xe9, 0x9d, 0x0f, 0x45, 0x23, 0x7d, 0x78, 0x6d, 0x6b, 0xba, 0xa7, 0x96, 0x5c, 0x78, 0x08, 0xbb, 0xff, 0x1a, 0x91]
    let test_case_sha1[-1].digest_str = 'e8e99d0f45237d786d6bbaa7965c7808bbff1a91'
    " let data_len =      20
    " let digest =        0x4c1a03424b55e07fe7f27be1d58bb9324a9a5a04
    " digest-96 =     0x4c1a03424b55e07fe7f27be1
  End

  Describe .key()
    It constructer argument check
      let hmacmd5 = HMAC.new(MD5, test_case_md5[0].key)
      Assert Equals(test_case_md5[0].digest_str, hmacmd5.hmac(test_case_md5[0].data))
    End
    It add after construction argument override
      let hmacmd5 = HMAC.new(MD5, '')
      call hmacmd5.key(test_case_md5[0].key)
      Assert Equals(test_case_md5[0].digest_str, hmacmd5.hmac(test_case_md5[0].data))
    End

    It add after construction add normal only algo new
      let hmacmd5 = HMAC.new(MD5)
      call hmacmd5.key(test_case_md5[0].key)
      Assert Equals(test_case_md5[0].digest_str, hmacmd5.hmac(test_case_md5[0].data))
    End

    It add after construction add normal no arg new
      let hmacmd5 = HMAC.new()
      call hmacmd5.hash(MD5)
      call hmacmd5.key(test_case_md5[0].key)
      Assert Equals(test_case_md5[0].digest_str, hmacmd5.hmac(test_case_md5[0].data))
    End
  End

  Describe .hash()
    It constructer argument check
      let hmacmd5 = HMAC.new(MD5, test_case_md5[0].key)
      Assert Equals(test_case_md5[0].digest_str, hmacmd5.hmac(test_case_md5[0].data))
    End
    " need SHA1
    " It add after construction argument override
    "   let hmacmd5 = HMAC.new(SHA1, test_case_md5[0].key)
    "   call hmacmd5.hash(MD5)
    "   Assert Equals(test_case_md5[0].digest_str, hmacmd5.hmac(test_case_md5[0].data))
    " End
    " need SHA1
    " It add after construction add normal only algo new
    "   let hmacmd5 = HMAC.new(SHA1)
    "   call hmacmd5.hash(MD5)
    "   call hmacmd5.key(test_case_md5[0].key)
    "   Assert Equals(test_case_md5[0].digest_str, hmacmd5.hmac(test_case_md5[0].data))
    " End
    It add after construction add normal no arg new
      let hmacmd5 = HMAC.new()
      call hmacmd5.hash(MD5)
      call hmacmd5.key(test_case_md5[0].key)
      Assert Equals(test_case_md5[0].digest_str, hmacmd5.hmac(test_case_md5[0].data))
    End
  End

  Describe .calc()
    It constructer argument work fine
      for test in test_case_md5
        let hmacmd5 = HMAC.new(MD5, test.key)
        Assert Equals(test.digest, hmacmd5.calc(test.data))
      endfor
      " need SHA1
      " for test in test_case_sha1
      "   let hmacsha1 = HMAC.new(SHA1, test.key)
      "   Assert Equals(test.digest_str, hmacsha1.hmac(test.data))
      " endfor
    End
    It add after construction work fine
      for test in test_case_md5
        let hmacmd5 = HMAC.new()
        call hmacmd5.hash(MD5)
        call hmacmd5.key(test.key)
        Assert Equals(test.digest, hmacmd5.calc(test.data))
      endfor
      " need SHA1
      " for test in test_case_sha1
      "   let hmacsha1 = HMAC.new()
      "   call hmacsha1.hash(SHA1)
      "   call hmacsha1.key(test.key)
      "   Assert Equals(test.digest_str, hmacsha1.hmac(test.data))
      " endfor
    End
    It no set algo do not work
      let hmacmd5 = HMAC.new()
      call hmacmd5.key(test_case_md5[0].key)
      Throws /^vital: Hash.HMAC:/ hmacmd5.calc(test_case_md5[0].data)
    End
    It no set key do not work
      let hmacmd5 = HMAC.new()
      call hmacmd5.hash(MD5)
      Throws /^vital: Hash.HMAC:/ hmacmd5.calc(test_case_md5[0].data)
    End
    It no set algo and key do not work
      let hmacmd5 = HMAC.new()
      Throws /^vital: Hash.HMAC:/ hmacmd5.calc(test_case_md5[0].data)
    End
  End

  Describe .hmac()
    It constructer argument work fine
      for test in test_case_md5
        let hmacmd5 = HMAC.new(MD5, test.key)
        Assert Equals(test.digest_str, hmacmd5.hmac(test.data))
      endfor
      " need SHA1
      " for test in test_case_sha1
      "   let hmacsha1 = HMAC.new(SHA1, test.key)
      "   Assert Equals(test.digest_str, hmacsha1.hmac(test.data))
      " endfor
    End
    It add after construction work fine
      for test in test_case_md5
        let hmacmd5 = HMAC.new()
        call hmacmd5.hash(MD5)
        call hmacmd5.key(test.key)
        Assert Equals(test.digest_str, hmacmd5.hmac(test.data))
      endfor
      " SHA1
      " for test in test_case_sha1
      "   let hmacsha1 = HMAC.new()
      "   call hmacsha1.hash(SHA1)
      "   call hmacsha1.key(test.key)
      "   Assert Equals(test.digest_str, hmacsha1.hmac(test.data))
      " endfor
    End
    It no set algo do not work
      let hmacmd5 = HMAC.new()
      call hmacmd5.key(test_case_md5[0].key)
      Throws /^vital: Hash.HMAC:/ hmacmd5.hmac(test_case_md5[0].data)
    End
    It no set key do not work
      let hmacmd5 = HMAC.new()
      call hmacmd5.hash(MD5)
      Throws /^vital: Hash.HMAC:/ hmacmd5.hmac(test_case_md5[0].data)
    End
    It no set algo and key do not work
      let hmacmd5 = HMAC.new()
      Throws /^vital: Hash.HMAC:/ hmacmd5.hmac(test_case_md5[0].data)
    End
  End
End
