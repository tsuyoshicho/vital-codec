Describe Random.System
  Before all
    let X = vital#vital#new().import('Random.System')
    let assert = themis#helper('assert')
  End

  Describe .rand()
    It run global RNG
      if has('patch-8.0.1630')
        Assert NotEquals(X.rand(), -1)
      else
        Skip not support
      endif
    End
  End

  Describe .srand()
    It non args use default
      if has('patch-8.0.1630')
        call X.srand()
        Assert NotEquals(X.rand(), -1)
      else
        Skip not support
      endif
    End
    It sets the seed number
      if has('patch-8.0.1630')
        call X.srand(1)
        Assert NotEquals(X.rand(), -1)
      else
        Skip not support
      endif
    End
    It sets the seed list
      if has('patch-8.0.1630')
        call X.srand([1, 2, 3, 4])
        Assert NotEquals(X.rand(), -1)
      else
        Skip not support
      endif
    End
    It arg num error to assertion
      if has('patch-8.0.1630')
        Throws /^vital: Random.System:/ X.srand(1, 2)
      else
        Skip not support
      endif
    End
  End

  Describe .new_generator()
    It generator constructer check
      let r = X.new_generator()
      call assert.is_dictionary(r)
    End
  End

  Describe Generator.next()
    It run instance RNG
      if has('patch-8.0.1630')
        let r = X.new_generator()
        call r.seed([0])
        Assert NotEquals(r.next(), -1)
      else
        Skip not support
      endif
    End
  End

  Describe Generator.min()
    It instance RNG's min
      let r = X.new_generator()
      Assert Equals(r.min(), 0)
    End
  End

  Describe Generator.max()
    It instance RNG's max
      let r = X.new_generator()
      Assert True(r.max() > 0)
    End
  End

  Describe Generator.seed()
    It instance RNG's seed list
      if has('patch-8.0.1630')
        let r = X.new_generator()
        call r.seed([1, 2, 3, 4])
        Assert NotEquals(r.next(), -1)
      else
        Skip not support
      endif
    End
  End

  " max not test-work
End
