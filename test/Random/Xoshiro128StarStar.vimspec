Describe Random. Xoshiro128StarStar
  Before all
    let X = vital#vital#new().import('Random.Xoshiro128StarStar')
    let assert = themis#helper('assert')
  End

  Describe Random. Xoshiro128StarStar native
    Before all
      let g:vital#random#xoshiro128starstar#use_pure = v:false
    End

    Describe .rand() native
      It returns target values with the seed 123456789
        " This test from vim Test_Rand()
        call X.srand(123456789)
        Assert Equals(X.rand(), 4284103975)
        Assert Equals(X.rand(), 1001954530)
        Assert Equals(X.rand(), 2701803082)
        Assert Equals(X.rand(), 2658065534)
        Assert Equals(X.rand(), 3104308804)
      End
    End

    Describe .srand() native
      It sets the seed with no arguments
        " call no args and not throw exception
        call X.srand()
        Assert NotEquals(X.rand(), -1)
      End
      It sets the seed with many arguments, then throw exception
        " call no args and not throw exception
        Throw /^vital: Random.Xoshiro128StarStar:/ X.srand(1, 2)
      End
    End

    Describe .new_generator() native
      It generator constructer check
        let r = X.new_generator()
        call assert.is_dictionary(r)
      End
    End

    Describe Generator.next() native
      It run instance RNG
        let r = X.new_generator()
        call r.seed([123456789])
        Assert Equals(r.next(), 4284103975)
      End
      It run instance RNG high count start
        let r = X.new_generator()
        call r.seed([123456789])
        " 2^32 calls
        for byte in range(4)
          for bit in range(8)
            call r.next()
          endfor
        endfor
        Assert NotEquals(r.next(), r.next())
      End
      It run instance RNG kick jump
        let r = X.new_generator()
        call r.seed([123456789])
        " 2^64 calls jump
        for byte in range(8)
          for bit in range(8)
            call r.next()
          endfor
        endfor
        Assert NotEquals(r.next(), r.next())
      End
      It run instance RNG kick longjump
        let r = X.new_generator()
        call r.seed([123456789])
        " 2^96 calls long jump
        for byte in range(1)
          for bit in range(8)
            call r.next()
          endfor
        endfor
        Assert NotEquals(r.next(), r.next())
      End
    End

    Describe Generator.min() native
      It instance RNG's min
        let r = X.new_generator()
        Assert Equals(r.min(), -2147483648)
      End
    End

    Describe Generator.max() native
      It instance RNG's max
        let r = X.new_generator()
        Assert Equals(r.max(), 2147483647)
      End
    End

    Describe Generator.seed() native
      It instance RNG's seed list
        let r = X.new_generator()
        call r.seed([1, 2, 3, 4])
        Assert NotEquals(r.next(), -1)
      End
    End
  End

  Describe Random. Xoshiro128StarStar pure implements
    Before all
      let g:vital#random#xoshiro128starstar#use_pure = v:true
    End

    Describe .rand() pure implements
      It returns target values with the seed 123456789
        " This test from vim Test_Rand()
        call X.srand(123456789)
        Assert Equals(X.rand(), 4284103975)
        Assert Equals(X.rand(), 1001954530)
        Assert Equals(X.rand(), 2701803082)
        Assert Equals(X.rand(), 2658065534)
        Assert Equals(X.rand(), 3104308804)
      End
    End

    Describe .srand() pure implements
      It sets the seed with no arguments
        " call no args and not throw exception
        call X.srand()
        Assert NotEquals(X.rand(), -1)
      End
      It sets the seed with many arguments, then throw exception
        " call no args and not throw exception
        Throw /^vital: Random.Xoshiro128StarStar:/ X.srand(1, 2)
      End
    End

    Describe .new_generator() pure implements
      It generator constructer check
        let r = X.new_generator()
        call assert.is_dictionary(r)
      End
    End

    Describe Generator.next() pure implements
      It run instance RNG
        let r = X.new_generator()
        call r.seed([123456789])
        Assert Equals(r.next(), 4284103975)
      End
      It run instance RNG high count start
        let r = X.new_generator()
        call r.seed([123456789])
        " 2^32 calls
        for byte in range(4)
          for bit in range(8)
            call r.next()
          endfor
        endfor
        Assert NotEquals(r.next(), r.next())
      End
      It run instance RNG kick jump
        let r = X.new_generator()
        call r.seed([123456789])
        " 2^64 calls jump
        for byte in range(8)
          for bit in range(8)
            call r.next()
          endfor
        endfor
        Assert NotEquals(r.next(), r.next())
      End
      It run instance RNG kick longjump
        let r = X.new_generator()
        call r.seed([123456789])
        " 2^96 calls long jump
        for byte in range(1)
          for bit in range(8)
            call r.next()
          endfor
        endfor
        Assert NotEquals(r.next(), r.next())
      End
    End

    Describe Generator.min() pure implements
      It instance RNG's min
        let r = X.new_generator()
        Assert Equals(r.min(), -2147483648)
      End
    End

    Describe Generator.max() pure implements
      It instance RNG's max
        let r = X.new_generator()
        Assert Equals(r.max(), 2147483647)
      End
    End

    Describe Generator.seed() pure implements
      It instance RNG's seed list
        let r = X.new_generator()
        call r.seed([1, 2, 3, 4])
        Assert NotEquals(r.next(), -1)
      End
    End
  End
End
