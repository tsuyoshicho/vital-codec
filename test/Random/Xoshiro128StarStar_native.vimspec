Describe Random. Xoshiro128StarStar native
  Before all
    let X = vital#vital#new().import('Random.Xoshiro128StarStar')
    call X.use_pure(v:false)
    let assert = themis#helper('assert')

    let B = vital#vital#new().import('Bitwise')
    let mask32bit = B.or(
    \ B.lshift(0xFFFF, 16),
    \          0xFFFF
    \)
  End

  Describe .rand() native
    It returns target values with the seed 123456789
      " This test from vim Test_Rand()
      call X.srand(123456789)
      Assert Equals(X.rand(), 4284103975)
      Assert Equals(X.rand(), 1001954530)
      Assert Equals(X.rand(), 2701803082)
      Assert Equals(X.rand(), 2658065534)
      Assert Equals(X.rand(), 3104308804)
    End
  End

  Describe .srand() native
    It sets the seed with no arguments
      " call no args and not throw exception
      call X.srand()
      Assert NotEquals(X.rand(), -1)
    End
    It sets the seed number
      call X.srand(1)
      Assert NotEquals(X.rand(), -1)
    End
    It sets the seed list
      call X.srand([1, 2, 3, 4])
      Assert NotEquals(X.rand(), -1)
    End
    It sets the seed with many arguments, then throw exception
      " call no args and not throw exception
      Throw /^vital: Random.Xoshiro128StarStar:/ X.srand(1, 2)
    End
  End

  Describe .new_generator() native
    It generator constructer check
      let r = X.new_generator()
      call assert.is_dictionary(r)
    End
  End

  Describe Generator.next() native
    It run instance RNG
      let r = X.new_generator()
      call r.seed([123456789])
      Assert Equals(r.next(), 4284103975)
    End
    It run instance RNG 32bit over and kick jump & longjump & overlap
      " 2^32 calls count up high
      " 2^64 calls jump
      " 2^96 calls long jump
      " 2^128 calls overlap
      Skip test, need a lot of calls
    End
  End

  Describe Generator.min() native
    It instance RNG's min
      let r = X.new_generator()
      Assert Equals(r.min(), -2147483648)
    End
  End

  Describe Generator.max() native
    It instance RNG's max
      let r = X.new_generator()
      Assert Equals(r.max(), 2147483647)
    End
  End

  Describe Generator.seed() native
    It instance RNG's seed list
      let r = X.new_generator()
      call r.seed([1, 2, 3, 4])
      Assert NotEquals(r.next(), -1)
    End
  End
End
