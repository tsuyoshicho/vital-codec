Describe Math.Prime
  Before all
    let P = vital#vital#new().import('Math.Prime')
    let assert = themis#helper('assert')
  End

  Describe .is_prime()
    It value 0
      let p = P.is_prime(0)
      Assert False(p)
    End
    It value 1
      let p = P.is_prime(1)
      Assert False(p)
    End
    It value 2
      let p = P.is_prime(2)
      Assert True(p)
    End
    It value 3
      let p = P.is_prime(3)
      Assert True(p)
    End
    It value 4
      let p = P.is_prime(4)
      Assert False(p)
    End
    It value 811
      let p = P.is_prime(811)
      Assert True(p)
    End
    It value 813
      let p = P.is_prime(813)
      Assert False(p)
    End
  End

  Describe .prime_list()
    It value 0
      let p = P.prime_list(0)
      Assert Equals(p, [])
    End
    It value 1
      let p = P.prime_list(1)
      Assert Equals(p, [])
    End
    It value 2
      let p = P.prime_list(2)
      Assert Equals(p, [2])
    End
    It value 3
      let p = P.prime_list(3)
      Assert Equals(p, [2, 3])
    End
    It value 4
      let p = P.prime_list(4)
      Assert Equals(p, [2, 3])
    End
    It value 813
      let p = P.prime_list(813)
      Assert Equals(p, [
      \ 2   ,
      \ 3   ,
      \ 5   ,
      \ 7   ,
      \ 11  ,
      \ 13  ,
      \ 17  ,
      \ 19  ,
      \ 23  ,
      \ 29  ,
      \ 31  ,
      \ 37  ,
      \ 41  ,
      \ 43  ,
      \ 47  ,
      \ 53  ,
      \ 59  ,
      \ 61  ,
      \ 67  ,
      \ 71  ,
      \ 73  ,
      \ 79  ,
      \ 83  ,
      \ 89  ,
      \ 97  ,
      \ 101 ,
      \ 103 ,
      \ 107 ,
      \ 109 ,
      \ 113 ,
      \ 127 ,
      \ 131 ,
      \ 137 ,
      \ 139 ,
      \ 149 ,
      \ 151 ,
      \ 157 ,
      \ 163 ,
      \ 167 ,
      \ 173 ,
      \ 179 ,
      \ 181 ,
      \ 191 ,
      \ 193 ,
      \ 197 ,
      \ 199 ,
      \ 211 ,
      \ 223 ,
      \ 227 ,
      \ 229 ,
      \ 233 ,
      \ 239 ,
      \ 241 ,
      \ 251 ,
      \ 257 ,
      \ 263 ,
      \ 269 ,
      \ 271 ,
      \ 277 ,
      \ 281 ,
      \ 283 ,
      \ 293 ,
      \ 307 ,
      \ 311 ,
      \ 313 ,
      \ 317 ,
      \ 331 ,
      \ 337 ,
      \ 347 ,
      \ 349 ,
      \ 353 ,
      \ 359 ,
      \ 367 ,
      \ 373 ,
      \ 379 ,
      \ 383 ,
      \ 389 ,
      \ 397 ,
      \ 401 ,
      \ 409 ,
      \ 419 ,
      \ 421 ,
      \ 431 ,
      \ 433 ,
      \ 439 ,
      \ 443 ,
      \ 449 ,
      \ 457 ,
      \ 461 ,
      \ 463 ,
      \ 467 ,
      \ 479 ,
      \ 487 ,
      \ 491 ,
      \ 499 ,
      \ 503 ,
      \ 509 ,
      \ 521 ,
      \ 523 ,
      \ 541 ,
      \ 547 ,
      \ 557 ,
      \ 563 ,
      \ 569 ,
      \ 571 ,
      \ 577 ,
      \ 587 ,
      \ 593 ,
      \ 599 ,
      \ 601 ,
      \ 607 ,
      \ 613 ,
      \ 617 ,
      \ 619 ,
      \ 631 ,
      \ 641 ,
      \ 643 ,
      \ 647 ,
      \ 653 ,
      \ 659 ,
      \ 661 ,
      \ 673 ,
      \ 677 ,
      \ 683 ,
      \ 691 ,
      \ 701 ,
      \ 709 ,
      \ 719 ,
      \ 727 ,
      \ 733 ,
      \ 739 ,
      \ 743 ,
      \ 751 ,
      \ 757 ,
      \ 761 ,
      \ 769 ,
      \ 773 ,
      \ 787 ,
      \ 797 ,
      \ 809 ,
      \ 811 ,
      \])
    End
  End

End
